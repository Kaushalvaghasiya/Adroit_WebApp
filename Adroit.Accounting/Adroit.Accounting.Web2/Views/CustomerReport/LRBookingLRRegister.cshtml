@using Adroit.Accounting.Model;
@using Adroit.Accounting.Model.Enums;
@inject Adroit.Accounting.Web.Utility.ILoginHandler loginHandler
@model Adroit.Accounting.Model.ReportViewModel.LRBookingLRRegisterViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    if (User?.Identity?.IsAuthenticated ?? false)
    {
        var firmId = loginHandler.GetLoggedInFirmId(User);
        ViewBag.Year = loginHandler.GetLoggedInYear(loginHandler.GetLoggedInYearId(User), firmId);
    }
    else
    {
        ViewBag.Year = string.Empty;
    }
}

<div class="dv-parameters side-app">
    <div class="row">
        <div class="col-md-12 col-lg-12">
            <div class="page-header">
                <ol class="breadcrumb breadcrumb-arrow">
                    <li><a href="#">Reports</a></li>
                    <li><a href="#">Book & Register</a></li>
                    <li><a href="#">LR Booking Register</a></li>
                    <li class="active"><span>LR Register</span></li>
                </ol>
                <div class="ml-auto">
                    <div class="input-group">
                        <a href="#" class="btn btn-secondary text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Bookmark this page">
                            <span>
                                <i class="fa fa-star"></i>
                            </span>
                        </a>
                        <a href="lockscreen.html" class="btn btn-primary text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="lock">
                            <span>
                                <i class="fa fa-lock"></i>
                            </span>
                        </a>
                        <a href="#" class="btn btn-warning text-white btn-sm show-report" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Show Report">
                            <span>
                                <i class="fa fa-spinner"></i>
                            </span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="card-header">
                    <!--<h3 class="card-title">Add/Edit Product</h3>-->
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="BranchIds">Branch</label>
                                <select class="group-filter mode-ed" id="BranchIds" multiple="multiple">
                                    @{
                                        if (Model.BranchList != null)
                                        {
                                            foreach (var y in Model.BranchList.GroupBy(o => o.Other).ToList())
                                            {
                                                <optgroup label="@y.First().Other">
                                                    @foreach (var o in y)
                                                    {
                                                        <option value="@o.Value">@o.Text</option>
                                                    }
                                                </optgroup>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="ViewId">View</label>
                                <select class="form-control select2-show-search-report" id="ViewId">
                                    @{
                                        if (Model.ViewList != null)
                                        {
                                            foreach (var o in Model.ViewList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="DateFrom">Date From</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            <i class="fa fa-calendar tx-16 lh-0 op-6"></i>
                                        </div>
                                    </div>
                                    <input class="form-control fc-datepicker" placeholder="@Constant.DateFormat.ToUpper()" type="text" id="DateFrom">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="DateTo">Date To</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            <i class="fa fa-calendar tx-16 lh-0 op-6"></i>
                                        </div>
                                    </div>
                                    <input class="form-control fc-datepicker" placeholder="@Constant.DateFormat.ToUpper()" type="text" id="DateTo">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="LRFrom">LR From</label>
                                <input type="text" class="form-control numberonly" id="LRFrom" placeholder="">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="LRTo">LR To</label>
                                <input type="text" class="form-control numberonly" id="LRTo" placeholder="">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="CityFromIds">City From</label>
                                <select class="filter-multi mode-ed-multi" id="CityFromIds" multiple="multiple">
                                    @{
                                        if (Model.CityList != null)
                                        {
                                            foreach (var o in Model.CityList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="CityToIds">City To</label>
                                <select class="filter-multi mode-ed-multi" id="CityToIds" multiple="multiple">
                                    @{
                                        if (Model.CityList != null)
                                        {
                                            foreach (var o in Model.CityList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="ConsignorIds">Consignor</label>
                                <select class="filter-multi mode-ed-multi" multiple="multiple" id="ConsignorIds">
                                    @{
                                        if (Model.AccountBranchMappingList != null)
                                        {
                                            foreach (var o in Model.AccountBranchMappingList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }

                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="ConsigneeIds">Consignee</label>
                                <select class="filter-multi mode-ed-multi" multiple="multiple" id="ConsigneeIds">
                                    @{
                                        if (Model.AccountBranchMappingList != null)
                                        {
                                            foreach (var o in Model.AccountBranchMappingList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="BillPartyIds">Bill Party</label>
                                <select class="filter-multi mode-ed-multi" multiple="multiple" id="BillPartyIds">
                                    @{
                                        if (Model.AccountBranchMappingList != null)
                                        {
                                            foreach (var o in Model.AccountBranchMappingList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="PvtMarkIds">Pvt Mark</label>
                                <select class="filter-multi mode-ed-multi" id="PvtMarkIds" multiple="multiple">
                                    @{
                                        if (Model.PvtMarkList != null)
                                        {
                                            foreach (var o in Model.PvtMarkList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="PayTypeIds">Pay Type</label>
                                <select class="filter-multi mode-ed-multi" id="PayTypeIds" multiple="multiple">
                                    @{
                                        if (Model.PayTypeList != null)
                                        {
                                            foreach (var o in Model.PayTypeList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="ChalanId">Chalan Status</label>
                                <select class="form-control select2-show-search-report" id="ChalanId">
                                    @{
                                        if (Model.ChalanList != null)
                                        {
                                            foreach (var o in Model.ChalanList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="InvStatusId">Inv. Status</label>
                                <select class="form-control select2-show-search-report" id="InvStatusId">
                                    @{
                                        if (Model.InvStatusList != null)
                                        {
                                            foreach (var o in Model.InvStatusList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group"><label for="form-group SubTotal">Sub Total</label></div>
                            <label class="custom-switch">
                                <input type="checkbox" name="custom-switch-checkbox" class="custom-switch-input" id="SubTotal">
                                <span class="custom-switch-indicator"></span>
                            </label>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group"><label for="form-group Summary">Summary</label></div>
                            <label class="custom-switch">
                                <input type="checkbox" name="custom-switch-checkbox" class="custom-switch-input" id="Summary">
                                <span class="custom-switch-indicator"></span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right">
                    <a href="#" class="btn btn-warning mt-1 show-report" data-toggle="tooltip" title="" data-placement="top" data-original-title="Print"><i class="fa fa-spinner"></i>&nbsp;Generate Report</a>
                    <a href="#" class="btn btn-gray mt-1" data-toggle="tooltip" title="" data-placement="top" data-original-title="Cancel"><i class="fa fa-refresh"></i>&nbsp;Reset</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="dv-report side-app">
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="page-header">
                <ol class="breadcrumb breadcrumb-arrow">
                    <li><a href="#">Reports</a></li>
                    <li><a href="#">Book & Register</a></li>
                    <li><a href="#">LR Booking Register</a></li>
                    <li class="active"><span>LR Register</span></li>
                </ol>
                <div class="ml-auto">
                    <div class="input-group">
                        <a href="#" class="btn btn-blue text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Print" id="PrintPDF"><span><i class="fa fa-print"></i></span></a>
                        <a href="#" class="btn btn-success text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Send"><span><i class="fa fa-share-alt"></i></span></a>
                        <a href="#" class="btn-back btn btn-gray text-white btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Cancel"><span><i class="fa fa-arrow-left"></i></span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="card-header">
                    <!--<h3 class="card-title">Add/Edit Product</h3>-->
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="tblMain" class="table table-bordered key-buttons">
                            <thead>
                                <tr></tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer text-right">
                    <a href="#" class="btn btn-blue mt-1" data-toggle="tooltip" title="" data-placement="top" data-original-title="Print" id="PrintPDF"><i class="fa fa-print"></i>&nbsp;Print</a>
                    <a href="#" class="btn btn-success mt-1" data-toggle="tooltip" title="" data-placement="top" data-original-title="Send"><i class="fa fa-share-alt"></i>&nbsp;Send</a>
                    <a href="#" class="btn btn-gray mt-1 btn-back" data-toggle="tooltip" title="" data-placement="top" data-original-title="Cancel"><i class="fa fa-arrow-left"></i>&nbsp;Back</a>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="hdnSelectedView" value="" />

@section Scripts
{

    <script>

        $(function (e) {

            $('.dv-report').hide();
            $('.dv-parameters').show();

            const viewBagYear = "@(ViewBag.Year)";
            const dateRange = getDateRange(viewBagYear);

            $(".show-report").on("click", function () {
                $('.dv-parameters').slideUp();
                $('.dv-report').slideDown();

                let spanElement = document.getElementById("select2-ViewId-container");
                let selectedView = spanElement.getAttribute("title");

                $("#hdnSelectedView").val(selectedView.replace(/\s/g, ''));

                let Summary = $('#Summary').is(':checked');

                if ($.fn.dataTable.isDataTable('#tblMain')) {
                    $('#tblMain').DataTable().destroy();
                }

                $('#tblMain tbody').html('');
                $('#tblMain thead tr').html('');

                if (selectedView == 'Date Wise' && Summary === false) {
                    DateWiseSummaryOffList();
                }
                if (selectedView == 'Date Wise' && Summary === true) {
                    DateWiseSummaryOnList();
                }
                if (selectedView == 'LR Wise' && (Summary === true || Summary === false)) {
                    LRWiseList();
                }
                if (selectedView == 'Party Wise' && Summary === false) {
                    PartyWiseSummaryOffList();
                }
                if (selectedView == 'Party Wise' && Summary === true) {
                    PartyWiseSummaryOnList();
                }

            });

            $("#PrintPDF").on("click", function () {

                let Summary = $('#Summary').is(':checked');
                let SubTotal = $('#SubTotal').is(':checked');

                if ($("#hdnSelectedView").val() == 'DateWise' && Summary === false) {
                    window.open('/CustomerReport/LRBookingLRRegisterPrintDateWise?SubTotal=' + SubTotal + '&DateFrom=' + $("#DateFrom").val() + '&DateTo=' + $("#DateTo").val(), '_blank');
                }
                if ($("#hdnSelectedView").val() == 'DateWise' && Summary === true) {
                    window.open('/CustomerReport/LRBookingLRRegisterPrintDateWiseSummary?SubTotal=' + SubTotal, '_blank');
                }
                if ($("#hdnSelectedView").val() == 'LRWise' && (Summary === true || Summary === false)) {
                    window.open('/CustomerReport/LRBookingLRRegisterPrintLRWise?SubTotal=' + SubTotal, '_blank');
                }
                if ($("#hdnSelectedView").val() == 'PartyWise' && Summary === false) {
                    window.open('/CustomerReport/LRBookingLRRegisterPrintPartyWise?SubTotal=' + SubTotal, '_blank');
                }
                if ($("#hdnSelectedView").val() == 'PartyWise' && Summary === true) {
                    window.open('/CustomerReport/LRBookingLRRegisterPrintPartyWiseSummary?SubTotal=' + SubTotal, '_blank');
                }

            });

            $(".btn-back").on("click", function () {
                $('.dv-parameters').slideDown();
                $('.dv-report').slideUp();
                $('#tblMain tbody').html('');
                $('#tblMain thead tr').html('');
            });

        });

        function getDateRange(yearRange) {
            const [startYear, endYear] = yearRange.split('-').map(Number);

            const startDate = moment(`${startYear}-04-01`, 'YYYY-MM-DD');
            const endDate = moment(`${endYear}-03-31`, 'YYYY-MM-DD');

            const formattedStartDate = startDate.format('DD/MM/YYYY');
            const formattedEndDate = endDate.format('DD/MM/YYYY');

            $("#DateFrom").val(formattedStartDate);
            $("#DateTo").val(formattedEndDate);
        }

        function getCurrentTableData() {
            var table = $('#tblMain').DataTable();
            var data = table.data().toArray();
            return data;
        }

        function DateWiseSummaryOffList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">FROM CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TO CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GOODS DESCRIPTION</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PACKING</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PVT.MARK</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST %</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PAY TYPE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let BranchIds = $('#BranchIds').val().length === 0 ? '0' : $('#BranchIds').val().join(",");
            let DateFrom = $('#DateFrom').val() == '' ? '0' : moment(getDate($("#DateFrom").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let DateTo = $('#DateTo').val() == '' ? '0' : moment(getDate($("#DateTo").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let CityFromIds = $('#CityFromIds').val().length === 0 ? '0' : $('#CityFromIds').val().join(",");
            let CityToIds = $('#CityToIds').val().length === 0 ? '0' : $('#CityToIds').val().join(",");
            let LRFrom = $('#LRFrom').val() == '' ? '0' : $('#LRFrom').val();
            let LRTo = $('#LRTo').val() == '' ? '0' : $('#LRTo').val();
            let ConsignorIds = $('#ConsignorIds').val().length === 0 ? '0' : $('#ConsignorIds').val().join(",");
            let ConsigneeIds = $('#ConsigneeIds').val().length === 0 ? '0' : $('#ConsigneeIds').val().join(",");
            let BillPartyIds = $('#BillPartyIds').val().length === 0 ? '0' : $('#BillPartyIds').val().join(",");
            let PvtMarkIds = $('#PvtMarkIds').val().length === 0 ? '0' : $('#PvtMarkIds').val().join(",");
            let PayTypeIds = $('#PayTypeIds').val().length === 0 ? '0' : $('#PayTypeIds').val().join(",");
            let ChalanId = getIntValueZero('ChalanId');
            let InvStatusId = getIntValueZero('InvStatusId');
            let SubTotal = $('#SubTotal').is(':checked');

            let currentDate = null;
            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevDate = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.lrDate.split('T')[0]).format('DD/MM/YYYY');
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityFrom;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityTo;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.description;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.packing;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.privateMarka;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrPayType;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "lrDate", "name": "lrDate" });
            columns.push({ "data": "lrNumber", "name": "lrNumber" });
            columns.push({ "data": "cityFrom", "name": "cityFrom" });
            columns.push({ "data": "cityTo", "name": "cityTo" });
            columns.push({ "data": "description", "name": "description" });
            columns.push({ "data": "parcel", "name": "parcel" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight" });
            columns.push({ "data": "packing", "name": "packing" });
            columns.push({ "data": "privateMarka", "name": "privateMarka" });
            columns.push({ "data": "amount", "name": "amount" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "lrPayType", "name": "lrPayType" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue" });
            columns.push({ "data": "branchName", "name": "branchName" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: true,
                pageLength: 50,
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportList"))',
                    type: 'GET',
                    data: function (d) {
                        d.selectedView = $("#hdnSelectedView").val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let dateCell = api.cell(i, 0).data();

                        if (prevDate !== null && dateCell !== prevDate) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                                    '<td colspan="9">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="5"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 9).data());
                        totalAmount += parseFloat(api.cell(i, 9).data());
                        tableBody.append(rows[i]);
                        prevDate = dateCell;
                    }

                    if (prevDate !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                            '<td colspan="9">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#e7dedfa8;">' +
                            '<td colspan="9">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }
            });
        }

        function DateWiseSummaryOnList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let BranchIds = $('#BranchIds').val().length === 0 ? '0' : $('#BranchIds').val().join(",");
            let DateFrom = $('#DateFrom').val() == '' ? '0' : moment(getDate($("#DateFrom").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let DateTo = $('#DateTo').val() == '' ? '0' : moment(getDate($("#DateTo").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let CityFromIds = $('#CityFromIds').val().length === 0 ? '0' : $('#CityFromIds').val().join(",");
            let CityToIds = $('#CityToIds').val().length === 0 ? '0' : $('#CityToIds').val().join(",");
            let LRFrom = $('#LRFrom').val() == '' ? '0' : $('#LRFrom').val();
            let LRTo = $('#LRTo').val() == '' ? '0' : $('#LRTo').val();
            let ConsignorIds = $('#ConsignorIds').val().length === 0 ? '0' : $('#ConsignorIds').val().join(",");
            let ConsigneeIds = $('#ConsigneeIds').val().length === 0 ? '0' : $('#ConsigneeIds').val().join(",");
            let BillPartyIds = $('#BillPartyIds').val().length === 0 ? '0' : $('#BillPartyIds').val().join(",");
            let PvtMarkIds = $('#PvtMarkIds').val().length === 0 ? '0' : $('#PvtMarkIds').val().join(",");
            let PayTypeIds = $('#PayTypeIds').val().length === 0 ? '0' : $('#PayTypeIds').val().join(",");
            let ChalanId = getIntValueZero('ChalanId');
            let InvStatusId = getIntValueZero('InvStatusId');
            let Summary = $('#Summary').is(':checked');
            let SubTotal = $('#SubTotal').is(':checked');

            let currentDate = null;
            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevDate = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.groupingColumn, "MMM DD YYYY h:mmA").format("DD/MM/YYYY");
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "groupingColumn", "name": "groupingColumn" });
            columns.push({ "data": "lrNumber", "name": "lrNumber" });
            columns.push({ "data": "parcel", "name": "parcel" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight" });
            columns.push({ "data": "amount", "name": "amount" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue" });
            columns.push({ "data": "branchName", "name": "branchName" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: true,
                pageLength: 50,
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportListWithSummary"))',
                    type: 'GET',
                    data: function (d) {
                        d.selectedView = $("#hdnSelectedView").val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);

                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let dateCell = api.cell(i, 0).data();

                        if (prevDate !== null && dateCell !== prevDate) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                                    '<td colspan="4">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="3"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 4).data());
                        totalAmount += parseFloat(api.cell(i, 4).data());
                        tableBody.append(rows[i]);
                        prevDate = dateCell;
                    }

                    if (prevDate !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                            '<td colspan="4">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#e7dedfa8;">' +
                            '<td colspan="4">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }

                }

            });
        }

        function LRWiseList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">FROM CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TO CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GOODS DESCRIPTION</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PACKING</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PVT.MARK</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST %</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PAY TYPE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let BranchIds = $('#BranchIds').val().length === 0 ? '0' : $('#BranchIds').val().join(",");
            let DateFrom = $('#DateFrom').val() == '' ? '0' : moment(getDate($("#DateFrom").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let DateTo = $('#DateTo').val() == '' ? '0' : moment(getDate($("#DateTo").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let CityFromIds = $('#CityFromIds').val().length === 0 ? '0' : $('#CityFromIds').val().join(",");
            let CityToIds = $('#CityToIds').val().length === 0 ? '0' : $('#CityToIds').val().join(",");
            let LRFrom = $('#LRFrom').val() == '' ? '0' : $('#LRFrom').val();
            let LRTo = $('#LRTo').val() == '' ? '0' : $('#LRTo').val();
            let ConsignorIds = $('#ConsignorIds').val().length === 0 ? '0' : $('#ConsignorIds').val().join(",");
            let ConsigneeIds = $('#ConsigneeIds').val().length === 0 ? '0' : $('#ConsigneeIds').val().join(",");
            let BillPartyIds = $('#BillPartyIds').val().length === 0 ? '0' : $('#BillPartyIds').val().join(",");
            let PvtMarkIds = $('#PvtMarkIds').val().length === 0 ? '0' : $('#PvtMarkIds').val().join(",");
            let PayTypeIds = $('#PayTypeIds').val().length === 0 ? '0' : $('#PayTypeIds').val().join(",");
            let ChalanId = getIntValueZero('ChalanId');
            let InvStatusId = getIntValueZero('InvStatusId');
            let SubTotal = $('#SubTotal').is(':checked');

            let totalAmount = 0;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.lrDate.split('T')[0]).format('DD/MM/YYYY');
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityFrom;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityTo;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.description;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.packing;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.privateMarka;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrPayType;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "lrNumber", "name": "lrNumber" });
            columns.push({ "data": "lrDate", "name": "lrDate" });
            columns.push({ "data": "cityFrom", "name": "cityFrom" });
            columns.push({ "data": "cityTo", "name": "cityTo" });
            columns.push({ "data": "description", "name": "description" });
            columns.push({ "data": "parcel", "name": "parcel" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight" });
            columns.push({ "data": "packing", "name": "packing" });
            columns.push({ "data": "privateMarka", "name": "privateMarka" });
            columns.push({ "data": "amount", "name": "amount" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "lrPayType", "name": "lrPayType" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue" });
            columns.push({ "data": "branchName", "name": "branchName" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: true,
                pageLength: 50,
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportList"))',
                    type: 'GET',
                    data: function (d) {
                        d.selectedView = $("#hdnSelectedView").val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        totalAmount += parseFloat(api.cell(i, 9).data());
                        tableBody.append(rows[i]);
                    }

                    if (SubTotal && totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#e7dedfa8;">' +
                            '<td colspan="9">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }

            });
        }

        function PartyWiseSummaryOffList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BILL PARTY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CONSIGNOR</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CONSIGNEE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">FROM CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TO CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GOODS DESCRIPTION</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PACKING</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PVT.MARK</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST %</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PAY TYPE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let BranchIds = $('#BranchIds').val().length === 0 ? '0' : $('#BranchIds').val().join(",");
            let DateFrom = $('#DateFrom').val() == '' ? '0' : moment(getDate($("#DateFrom").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let DateTo = $('#DateTo').val() == '' ? '0' : moment(getDate($("#DateTo").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let CityFromIds = $('#CityFromIds').val().length === 0 ? '0' : $('#CityFromIds').val().join(",");
            let CityToIds = $('#CityToIds').val().length === 0 ? '0' : $('#CityToIds').val().join(",");
            let LRFrom = $('#LRFrom').val() == '' ? '0' : $('#LRFrom').val();
            let LRTo = $('#LRTo').val() == '' ? '0' : $('#LRTo').val();
            let ConsignorIds = $('#ConsignorIds').val().length === 0 ? '0' : $('#ConsignorIds').val().join(",");
            let ConsigneeIds = $('#ConsigneeIds').val().length === 0 ? '0' : $('#ConsigneeIds').val().join(",");
            let BillPartyIds = $('#BillPartyIds').val().length === 0 ? '0' : $('#BillPartyIds').val().join(",");
            let PvtMarkIds = $('#PvtMarkIds').val().length === 0 ? '0' : $('#PvtMarkIds').val().join(",");
            let PayTypeIds = $('#PayTypeIds').val().length === 0 ? '0' : $('#PayTypeIds').val().join(",");
            let ChalanId = getIntValueZero('ChalanId');
            let InvStatusId = getIntValueZero('InvStatusId');
            let SubTotal = $('#SubTotal').is(':checked');

            let currentDate = null;
            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevParty = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];

            colDef.push({
                "render": function (data, type, row) {
                    return row.billPartyName;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.consignor;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.consignee;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.lrDate.split('T')[0]).format('DD/MM/YYYY');
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityFrom;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityTo;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.description;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.packing;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.privateMarka;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrPayType;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "billPartyName", "name": "billPartyName" });
            columns.push({ "data": "consignor", "name": "consignor" });
            columns.push({ "data": "consignee", "name": "consignee" });
            columns.push({ "data": "lrNumber", "name": "lrNumber" });
            columns.push({ "data": "lrDate", "name": "lrDate" });
            columns.push({ "data": "cityFrom", "name": "cityFrom" });
            columns.push({ "data": "cityTo", "name": "cityTo" });
            columns.push({ "data": "description", "name": "description" });
            columns.push({ "data": "parcel", "name": "parcel" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight" });
            columns.push({ "data": "packing", "name": "packing" });
            columns.push({ "data": "privateMarka", "name": "privateMarka" });
            columns.push({ "data": "amount", "name": "amount" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "lrPayType", "name": "lrPayType" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue" });
            columns.push({ "data": "branchName", "name": "branchName" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: true,
                pageLength: 50,
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportList"))',
                    type: 'GET',
                    data: function (d) {
                        d.selectedView = $("#hdnSelectedView").val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let billPartyCell = api.cell(i, 0).data();

                        if (prevParty !== null && billPartyCell !== prevParty) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                                    '<td colspan="12">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="5"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 12).data());
                        totalAmount += parseFloat(api.cell(i, 12).data());

                        tableBody.append(rows[i]);
                        prevParty = billPartyCell;
                    }

                    if (prevParty !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                            '<td colspan="12">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0 && SubTotal) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#e7dedfa8;">' +
                            '<td colspan="12">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }

            });
        }

        function PartyWiseSummaryOnList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CONSIGNOR</TH>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL LR</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let BranchIds = $('#BranchIds').val().length === 0 ? '0' : $('#BranchIds').val().join(",");
            let DateFrom = $('#DateFrom').val() == '' ? '0' : moment(getDate($("#DateFrom").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let DateTo = $('#DateTo').val() == '' ? '0' : moment(getDate($("#DateTo").val())).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
            let CityFromIds = $('#CityFromIds').val().length === 0 ? '0' : $('#CityFromIds').val().join(",");
            let CityToIds = $('#CityToIds').val().length === 0 ? '0' : $('#CityToIds').val().join(",");
            let LRFrom = $('#LRFrom').val() == '' ? '0' : $('#LRFrom').val();
            let LRTo = $('#LRTo').val() == '' ? '0' : $('#LRTo').val();
            let ConsignorIds = $('#ConsignorIds').val().length === 0 ? '0' : $('#ConsignorIds').val().join(",");
            let ConsigneeIds = $('#ConsigneeIds').val().length === 0 ? '0' : $('#ConsigneeIds').val().join(",");
            let BillPartyIds = $('#BillPartyIds').val().length === 0 ? '0' : $('#BillPartyIds').val().join(",");
            let PvtMarkIds = $('#PvtMarkIds').val().length === 0 ? '0' : $('#PvtMarkIds').val().join(",");
            let PayTypeIds = $('#PayTypeIds').val().length === 0 ? '0' : $('#PayTypeIds').val().join(",");
            let ChalanId = getIntValueZero('ChalanId');
            let InvStatusId = getIntValueZero('InvStatusId');
            let Summary = $('#Summary').is(':checked');
            let SubTotal = $('#SubTotal').is(':checked');

            let currentDate = null;
            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevParty = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return row.groupingColumn;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "groupingColumn", "name": "groupingColumn" });
            columns.push({ "data": "lrNumber", "name": "lrNumber" });
            columns.push({ "data": "parcel", "name": "parcel" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight" });
            columns.push({ "data": "amount", "name": "amount" });
            columns.push({ "data": "rate", "name": "rate" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue" });
            columns.push({ "data": "branchName", "name": "branchName" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: true,
                pageLength: 50,
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportListWithSummary"))',
                    type: 'GET',
                    data: function (d) {
                        d.selectedView = $("#hdnSelectedView").val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let billPartyCell = api.cell(i, 0).data();

                        if (prevParty !== null && billPartyCell !== prevParty) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                                    '<td colspan="4">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="3"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 4).data());
                        totalAmount += parseFloat(api.cell(i, 4).data());

                        tableBody.append(rows[i]);
                        prevParty = billPartyCell;
                    }

                    if (prevParty !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e7dedfa8;">' +
                            '<td colspan="4">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#e7dedfa8;">' +
                            '<td colspan="4">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }

                }

            });
        }

    </script>

}
