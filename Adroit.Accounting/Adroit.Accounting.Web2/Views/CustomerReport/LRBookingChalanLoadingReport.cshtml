@using Adroit.Accounting.Model;
@using Adroit.Accounting.Model.Enums;
@inject Adroit.Accounting.Web.Utility.ILoginHandler loginHandler
@model Adroit.Accounting.Model.ReportViewModel.LRBookingChalanLoadingReportViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    if (User?.Identity?.IsAuthenticated ?? false)
    {
        var firmId = loginHandler.GetLoggedInFirmId(User);
        ViewBag.Year = loginHandler.GetLoggedInYear(loginHandler.GetLoggedInYearId(User), firmId);
    }
    else
    {
        ViewBag.Year = string.Empty;
    }
}

<div class="dv-parameters side-app">
    <div class="row">
        <div class="col-md-12 col-lg-12">
            <div class="page-header">
                <ol class="breadcrumb breadcrumb-arrow">
                    <li><a href="#">Reports</a></li>
                    <li><a href="#">Book & Register</a></li>
                    <li><a href="#">LR Booking Register</a></li>
                    <li class="active"><span>Chalan Loading Report</span></li>
                </ol>
                <div class="ml-auto">
                    <div class="input-group">
                        <a href="#" class="btn btn-secondary text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Bookmark this page">
                            <span>
                                <i class="fa fa-star"></i>
                            </span>
                        </a>
                        <a href="lockscreen.html" class="btn btn-primary text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="lock">
                            <span>
                                <i class="fa fa-lock"></i>
                            </span>
                        </a>
                        <a href="#" class="btn btn-warning text-white btn-sm show-report" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Show Report">
                            <span>
                                <i class="fa fa-spinner"></i>
                            </span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="card-header">
                    <!--<h3 class="card-title">Add/Edit Product</h3>-->
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="BranchIds">Branch</label>
                                <select class="group-filter mode-ed" id="BranchIds" multiple="multiple">
                                    @{
                                        if (Model.BranchList != null)
                                        {
                                            foreach (var y in Model.BranchList.GroupBy(o => o.Other).ToList())
                                            {
                                                <optgroup label="@y.First().Other">
                                                    @foreach (var o in y)
                                                    {
                                                        <option value="@o.Value">@o.Text</option>
                                                    }
                                                </optgroup>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="ViewId">View</label>
                                <select class="form-control select2-show-search-report" id="ViewId">
                                    @{
                                        if (Model.ViewList != null)
                                        {
                                            foreach (var o in Model.ViewList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="DateFrom">Date</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            <i class="fa fa-calendar tx-16 lh-0 op-6"></i>
                                        </div>
                                    </div>
                                    <input class="form-control fc-datepicker1 fc-daterange" placeholder="@Constant.DateFormat.ToUpper()" type="text" id="DateFrom">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="ChalanFrom">Chalan From</label>
                                <input type="text" class="form-control numberonly" id="ChalanFrom" placeholder="">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="ChalanTo">Chalan To</label>
                                <input type="text" class="form-control numberonly" id="ChalanTo" placeholder="">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="CityFromIds">City From</label>
                                <select class="filter-multi mode-ed-multi" id="CityFromIds" multiple="multiple">
                                    @{
                                        if (Model.CityList != null)
                                        {
                                            foreach (var o in Model.CityList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="CityToIds">City To</label>
                                <select class="filter-multi mode-ed-multi" id="CityToIds" multiple="multiple">
                                    @{
                                        if (Model.CityList != null)
                                        {
                                            foreach (var o in Model.CityList)
                                            {
                                                <option value="@o.Value">@o.Text</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="VehicleNumber">Vehicle Number</label>
                                <input type="text" class="form-control" id="VehicleNumber" placeholder="">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="VehicleOwner">Vehicle Owner</label>
                                <input type="text" class="form-control" id="VehicleOwner" placeholder="">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="Agent">Agent</label>
                                <input type="text" class="form-control" id="Agent" placeholder="">
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group"><label for="form-group SubTotal">Sub Total</label></div>
                            <label class="custom-switch">
                                <input type="checkbox" name="custom-switch-checkbox" class="custom-switch-input" id="SubTotal">
                                <span class="custom-switch-indicator"></span>
                            </label>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group"><label for="form-group Summary">Summary</label></div>
                            <label class="custom-switch">
                                <input type="checkbox" name="custom-switch-checkbox" class="custom-switch-input" id="Summary">
                                <span class="custom-switch-indicator"></span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right">
                    <a href="#" class="btn btn-warning mt-1 show-report" data-toggle="tooltip" title="" data-placement="top" data-original-title="Print"><i class="fa fa-spinner"></i>&nbsp;Generate Report</a>
                    <a href="#" class="btn btn-gray mt-1" data-toggle="tooltip" title="" data-placement="top" data-original-title="Cancel"><i class="fa fa-refresh"></i>&nbsp;Reset</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="dv-report side-app">
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="page-header">
                <ol class="breadcrumb breadcrumb-arrow">
                    <li><a href="#">Reports</a></li>
                    <li><a href="#">Book & Register</a></li>
                    <li><a href="#">LR Booking Register</a></li>
                    <li class="active"><span>Chalan Loading Report</span></li>
                </ol>
                <div class="ml-auto">
                    <div class="input-group">
                        <a href="#" target="_blank" class="btn btn-blue text-white mr-2 btn-sm btn-print" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Print"><span><i class="fa fa-print"></i></span></a>
                        <a href="#" class="btn btn-success text-white mr-2 btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Send"><span><i class="fa fa-share-alt"></i></span></a>
                        <a href="#" class="btn-back btn btn-gray text-white btn-sm" data-toggle="tooltip" title="" data-placement="bottom" data-original-title="Cancel"><span><i class="fa fa-arrow-left"></i></span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="card-header">
                    <!--<h3 class="card-title">Add/Edit Product</h3>-->
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="tblMain" class="table table-bordered key-buttons">
                            <thead>
                                <tr></tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer text-right">
                    <a href="#" target="_blank" class="btn btn-blue mt-1 btn-print" data-toggle="tooltip" title="" data-placement="top" data-original-title="Print"><i class="fa fa-print"></i>&nbsp;Print</a>
                    <a href="#" class="btn btn-success mt-1" data-toggle="tooltip" title="" data-placement="top" data-original-title="Send"><i class="fa fa-share-alt"></i>&nbsp;Send</a>
                    <a href="#" class="btn btn-gray mt-1 btn-back" data-toggle="tooltip" title="" data-placement="top" data-original-title="Cancel"><i class="fa fa-arrow-left"></i>&nbsp;Back</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {

    <script>

        $(function (e) {

            $('.dv-report').hide();
            $('.dv-parameters').show();

            const viewBagYear = "@(ViewBag.Year)";
            const dateRange = getDateRange(viewBagYear);

            $(".reset-button").on("click", function () {
                $("#BranchIds").multipleSelect('setSelects', []);
                $("#ViewId").val($("#ViewId option:first").val()).trigger("change");
                $("#ChalanFrom").val("");
                $("#ChalanTo").val("");
                $("#CityFromIds").multipleSelect('setSelects', []);
                $("#CityToIds").multipleSelect('setSelects', []);
                $("#VehicleNumber").val("");
                $("#VehicleOwner").val("");
                $("#Agent").val("");
                $("#SubTotal").prop('checked', false);
                $("#Summary").prop('checked', false);
            });

            $(".show-report").on("click", function () {
                // $('.dv-parameters').slideUp();
                // $('.dv-report').slideDown();
                BranchIds = $('#BranchIds').val().length === 0 ? '0' : $('#BranchIds').val().join(",");
                if (BranchIds == '0') {
                    showWarning("", "Please select branch");
                    return;
                }
                var dates = $('#DateFrom').val().split(" - ");
                DateFrom = moment(getDate(dates[0])).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
                DateTo = moment(getDate(dates[1])).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
                ChalanFrom = $('#ChalanFrom').val() == '' ? '0' : $('#ChalanFrom').val();
                ChalanTo = $('#ChalanTo').val() == '' ? '0' : $('#ChalanTo').val();
                CityFromIds = $('#CityFromIds').val().length === 0 ? '0' : $('#CityFromIds').val().join(",");
                CityToIds = $('#CityToIds').val().length === 0 ? '0' : $('#CityToIds').val().join(",");
                VehicleNumber = $('#VehicleNumber').val();
                VehicleOwner = $('#VehicleOwner').val();
                Agent = $('#Agent').val();
                
                $('.dv-parameters').slideUp();
                $('.dv-report').slideDown();

                let selectedView = $('#ViewId').val();

                let summary = $('#Summary').is(':checked');
                let subTotal = $('#SubTotal').is(':checked');

                if ($.fn.dataTable.isDataTable('#tblMain')) {
                    $('#tblMain').DataTable().destroy();
                }

                $('#tblMain tbody').html('');
                $('#tblMain thead tr').html('');

                var url = '@Url.Content("~/CustomerReport")';

                if (selectedView == '@((int)ChalanViewList.DateWise)') {
                    if (summary) {
                        url += '/LRBookingChalanLoadingPrintDateWiseSummary';
                        dateWiseSummaryOnList();
                    }
                    else {
                        url += '/LRBookingChalanLoadingPrintDateWise';
                        dateWiseSummaryOffList();
                    }
                }
                else if (selectedView == '@((int)ChalanViewList.TruckWise)') {
                    if (summary) {
                        url += '/LRBookingChalanLoadingPrintTruckWiseSummary';
                        partyWiseSummaryOnList();
                    }
                    else {
                        url += '/LRBookingChalanLoadingPrintTruckWise';
                        partyWiseSummaryOffList();
                    }
                }

                var dates = $('#DateFrom').val().split(" - ");
                url += '?SubTotal=' + subTotal + '&DateFrom=' + dates[0] + '&DateTo=' + dates[1];
                $(".btn-print").attr("href", url);
            });

            $(".btn-back").on("click", function () {
                $('.dv-parameters').slideDown();
                $('.dv-report').slideUp();
                $('#tblMain tbody').html('');
                $('#tblMain thead tr').html('');
            });

            $('.hide-for-datewise').hide();
            $("#ViewId").on('change', function (e) {
                if ($(this).val() == '@((int)ChalanViewList.DateWise)') {
                    $('.hide-for-datewise').hide();
                } else {
                    $('.hide-for-datewise').show();
                }
            });
        });

        function getDateRange(yearRange) {
            const [startYear, endYear] = yearRange.split('-').map(Number);

            const startDate = moment(`${startYear}-04-01`, 'YYYY-MM-DD');
            const endDate = moment(`${endYear}-03-31`, 'YYYY-MM-DD');

            const formattedStartDate = startDate.format('DD/MM/YYYY');
            const formattedEndDate = endDate.format('DD/MM/YYYY');

            $("#DateFrom").val(formattedStartDate + ' - ' + formattedEndDate);
            //$("#DateTo").val(formattedEndDate);
        }

        function getCurrentTableData() {
            var table = $('#tblMain').DataTable();
            var data = table.data().toArray();
            return data;
        }

        var BranchIds;
        var DateFrom;
        var DateTo;
        var ChalanFrom;
        var ChalanTo;
        var CityFromIds;
        var CityToIds;
        var VehicleNumber;
        var VehicleOwner;
        var Agent;
        var SubTotal;

        function dateWiseSummaryOffList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">LOADING DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">CHALAN NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">TRUCK NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL LR</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PARCLE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">TOTAL TO PAY AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PAID AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">TOTAL TO BE BILLED AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LORRY HIRE CHARGE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">LESS TDS</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TDS(-)</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST %</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">CASH TO LORRY TRIP</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BANK PAYMENT TO LORRY TRIP</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">RECEIVED CASH BY DRIVER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">OTHER EXPS. OF TRIP</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BALANCE LORRY HIRE CHARGE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL FREIGHT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevDate = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.loadingDate.split('T')[0]).format('DD/MM/YYYY');
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.chalanNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.truckNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.totalLR;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.totalParcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.totalToPayAmount ||0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.totalPaidAmount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.totalToBeBilledAmount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.lorryHireCharge || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lessTDS;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.tds;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.gstPer || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.gstAmount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.cashToLorryTrip || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.bankPaymentToLorryTrip || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.receivedCashByDriver || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.otherExpsOfTrip || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.balanceLorryHireCharge || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.totalFreight || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "loadingDate", "name": "loadingDate", "className": "text-center" });
            columns.push({ "data": "chalanNumber", "name": "chalanNumber", "className": "text-center" });
            columns.push({ "data": "truckNumber", "name": "truckNumber", "className": "text-center" });
            columns.push({ "data": "totalLR", "name": "totalLR", "className": "text-left" });
            columns.push({ "data": "totalParcel", "name": "totalParcel", "className": "text-right" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight", "className": "text-right" });
            columns.push({ "data": "totalToPayAmount", "name": "totalToPayAmount", "className": "text-right" });
            columns.push({ "data": "totalPaidAmount", "name": "totalPaidAmount", "className": "text-right" });
            columns.push({ "data": "totalToBeBilledAmount", "name": "totalToBeBilledAmount", "className": "text-right" });
            columns.push({ "data": "lorryHireCharge", "name": "lorryHireCharge", "className": "text-left" });
            columns.push({ "data": "lessTDS", "name": "lessTDS", "className": "text-right" });
            columns.push({ "data": "tds", "name": "tds", "className": "text-right" });
            columns.push({ "data": "gstPer", "name": "gstPer", "className": "text-right" });
            columns.push({ "data": "gstAmount", "name": "gstAmount", "className": "text-right" });
            columns.push({ "data": "cashToLorryTrip", "name": "cashToLorryTrip", "className": "text-right" });
            columns.push({ "data": "bankPaymentToLorryTrip", "name": "bankPaymentToLorryTrip", "className": "text-right" });
            columns.push({ "data": "receivedCashByDriver", "name": "receivedCashByDriver", "className": "text-right" });
            columns.push({ "data": "otherExpsOfTrip", "name": "otherExpsOfTrip", "className": "text-right" });
            columns.push({ "data": "balanceLorryHireCharge", "name": "balanceLorryHireCharge", "className": "text-right" });
            columns.push({ "data": "totalFreight", "name": "totalFreight", "className": "text-right" });
            columns.push({ "data": "branchName", "name": "branchName", "className": "text-center" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: false,
                //pageLength: @(int.MaxValue),
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingChalanLoadingReportList"))',
                    type: 'GET',
                    data: function (d) {
                        d.SelectedView = $('#ViewId').val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.ChalanFrom = ChalanFrom;
                        d.ChalanTo = ChalanTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.VehicleNumber = VehicleNumber;
                        d.VehicleOwner = VehicleOwner;
                        d.Agent = Agent;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let dateCell = api.cell(i, 0).data();

                        if (prevDate !== null && dateCell !== prevDate) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                                    '<td colspan="9">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="5"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 9).data());
                        totalAmount += parseFloat(api.cell(i, 9).data());
                        tableBody.append(rows[i]);
                        prevDate = dateCell;
                    }

                    if (prevDate !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                            '<td colspan="9">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#cccccc;color:#FF0000;">' +
                            '<td colspan="9">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }
            });
        }

        function dateWiseSummaryOnList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">TOTAL CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">TOTAL LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">TOTAL INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevDate = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.groupingColumn, "MMM DD YYYY h:mmA").format("DD/MM/YYYY");
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "groupingColumn", "name": "groupingColumn", "className": "text-center" });
            columns.push({ "data": "lrNumber", "name": "lrNumber", "className": "text-center" });
            columns.push({ "data": "parcel", "name": "parcel", "className": "text-center" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight", "className": "text-right" });
            columns.push({ "data": "amount", "name": "amount", "className": "text-right" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue", "className": "text-right" });
            columns.push({ "data": "branchName", "name": "branchName", "className": "text-center" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: false,
                //pageLength: @(int.MaxValue),
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportListWithSummary"))',
                    type: 'GET',
                    data: function (d) {
                        d.SelectedView = $('#ViewId').val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);

                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let dateCell = api.cell(i, 0).data();

                        if (prevDate !== null && dateCell !== prevDate) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                                    '<td colspan="4">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="3"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 4).data());
                        totalAmount += parseFloat(api.cell(i, 4).data());
                        tableBody.append(rows[i]);
                        prevDate = dateCell;
                    }

                    if (prevDate !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                            '<td colspan="4">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#cccccc;color:#FF0000;">' +
                            '<td colspan="4">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }

                }

            });
        }

        function lrWiseList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LR DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">FROM CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TO CITY</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">GOODS DESCRIPTION</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PACKING</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">PVT.MARK</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST %</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">PAY TYPE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let totalAmount = 0;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.lrDate.split('T')[0]).format('DD/MM/YYYY');
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityFrom;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityTo;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.description;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.packing;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.privateMarka;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrPayType;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "lrDate", "name": "lrDate", "className": "text-center" });
            columns.push({ "data": "lrNumber", "name": "lrNumber", "className": "text-center" });
            columns.push({ "data": "cityFrom", "name": "cityFrom", "className": "text-left" });
            columns.push({ "data": "cityTo", "name": "cityTo", "className": "text-left" });
            columns.push({ "data": "description", "name": "description", "className": "text-left" });
            columns.push({ "data": "parcel", "name": "parcel", "className": "text-center" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight", "className": "text-right" });
            columns.push({ "data": "packing", "name": "packing", "className": "text-center" });
            columns.push({ "data": "privateMarka", "name": "privateMarka", "className": "text-left" });
            columns.push({ "data": "amount", "name": "amount", "className": "text-right" });
            columns.push({ "data": "rate", "name": "rate", "className": "text-center" });
            columns.push({ "data": "lrPayType", "name": "lrPayType", "className": "text-center" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue", "className": "text-right" });
            columns.push({ "data": "branchName", "name": "branchName", "className": "text-left" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: false,
                //pageLength: @(int.MaxValue),
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportList"))',
                    type: 'GET',
                    data: function (d) {
                        d.SelectedView = $('#ViewId').val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        totalAmount += parseFloat(api.cell(i, 9).data());
                        tableBody.append(rows[i]);
                    }

                    if (SubTotal && totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#e5e4e2;color:#FF0000;">' +
                            '<td colspan="9">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }

            });
        }

        function truckWiseSummaryOffList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">LOADING DATE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">CHALAN NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">TRUCK NUMBER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL LR</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PARCLE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">TOTAL TO PAY AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PAID AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">TOTAL TO BE BILLED AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">LORRY HIRE CHARGE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">LESS TDS</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TDS(-)</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST %</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">GST AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">CASH TO LORRY TRIP</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BANK PAYMENT TO LORRY TRIP</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">RECEIVED CASH BY DRIVER</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">OTHER EXPS. OF TRIP</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BALANCE LORRY HIRE CHARGE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL FREIGHT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevParty = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];

            colDef.push({
                "render": function (data, type, row) {
                    return row.billPartyName;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.consignor;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.consignee;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return moment(row.lrDate.split('T')[0]).format('DD/MM/YYYY');
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityFrom;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.cityTo;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.description;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.packing;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.privateMarka;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.rate || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrPayType;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "billPartyName", "name": "billPartyName", "className": "text-left" });
            columns.push({ "data": "consignor", "name": "consignor", "className": "text-left" });
            columns.push({ "data": "consignee", "name": "consignee", "className": "text-left" });
            columns.push({ "data": "lrNumber", "name": "lrNumber", "className": "text-center" });
            columns.push({ "data": "lrDate", "name": "lrDate", "className": "text-center" });
            columns.push({ "data": "cityFrom", "name": "cityFrom", "className": "text-left" });
            columns.push({ "data": "cityTo", "name": "cityTo", "className": "text-left" });
            columns.push({ "data": "description", "name": "description", "className": "text-left" });
            columns.push({ "data": "parcel", "name": "parcel", "className": "text-center" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight", "className": "text-right" });
            columns.push({ "data": "packing", "name": "packing", "className": "text-left" });
            columns.push({ "data": "privateMarka", "name": "privateMarka", "className": "text-left" });
            columns.push({ "data": "amount", "name": "amount", "className": "text-right" });
            columns.push({ "data": "rate", "name": "rate", "className": "text-center" });
            columns.push({ "data": "lrPayType", "name": "lrPayType", "className": "text-center" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue", "className": "text-right" });
            columns.push({ "data": "branchName", "name": "branchName", "className": "text-left" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: false,
                //pageLength: @(int.MaxValue),
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportList"))',
                    type: 'GET',
                    data: function (d) {
                        d.SelectedView = $('#ViewId').val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let billPartyCell = api.cell(i, 0).data();

                        if (prevParty !== null && billPartyCell !== prevParty) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                                    '<td colspan="12">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="5"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 12).data());
                        totalAmount += parseFloat(api.cell(i, 12).data());

                        tableBody.append(rows[i]);
                        prevParty = billPartyCell;
                    }

                    if (prevParty !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                            '<td colspan="12">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#cccccc;color:#FF0000;">' +
                            '<td colspan="12">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="5"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }

            });
        }

        function truckWiseSummaryOnList() {

            $('#tblMain thead tr').append('<th class="border-bottom-0 text-left">CONSIGNOR</TH>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL LR</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">TOTAL PARCEL</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">TOTAL CHARGE WT.</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">TOTAL LR AMOUNT</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-right">TOTAL INV VALUE</th>');
            $('#tblMain thead tr').append('<th class="border-bottom-0 text-center">BRANCH</th>');

            let subTotalAmount = 0;
            let totalAmount = 0;
            let prevParty = null;
            let tableBody = $('#tblMain tbody');

            let columns = [];
            let colDef = [];
            colDef.push({
                "render": function (data, type, row) {
                    return row.groupingColumn;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.lrNumber;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.parcel;
                },
                "targets": colDef.length,
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.chargeWeight || 0).toFixed(3);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.amount || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return (row.invoiceValue || 0).toFixed(2);
                },
                "targets": colDef.length,
                "className": "text-right",
            });
            colDef.push({
                "render": function (data, type, row) {
                    return row.branchName;
                },
                "targets": colDef.length,
            });

            columns.push({ "data": "groupingColumn", "name": "groupingColumn", "className": "text-left" });
            columns.push({ "data": "lrNumber", "name": "lrNumber", "className": "text-center" });
            columns.push({ "data": "parcel", "name": "parcel", "className": "text-center" });
            columns.push({ "data": "chargeWeight", "name": "chargeWeight", "className": "text-right" });
            columns.push({ "data": "amount", "name": "amount", "className": "text-right" });
            columns.push({ "data": "invoiceValue", "name": "invoiceValue", "className": "text-right" });
            columns.push({ "data": "branchName", "name": "branchName", "className": "text-center" });

            var table = $('#tblMain').DataTable({
                "bAutoWidth": false,
                lengthChange: false,
                ordering: true,
                searching: true,
                paging: false,
                //pageLength: @(int.MaxValue),
                order: [[0, 'asc']],
                pagingType: 'full_numbers',
                orderClasses: false,
                destroy: true,
                //scrollCollapse: true,
                //stateSave: false,
                columnDefs: colDef,
                columns: columns,
                language: {
                    paginate: {
                        next: '<i class="fa fa-angle-right"></i>', // or '→'
                        previous: '<i class="fa fa-angle-left"></i>', // or '←'
                        first: '<i class="fa fa-angle-double-left"></i>', // or '→'
                        last: '<i class="fa fa-angle-double-right"></i>' // or '←'
                    }
                },
                buttons: ['copy', 'excel', 'colvis'],
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@(Url.Content("~/CustomerReport/LRBookingLRRegisterReportListWithSummary"))',
                    type: 'GET',
                    data: function (d) {
                        d.SelectedView = $('#ViewId').val();
                        d.BranchIds = BranchIds;
                        d.DateFrom = DateFrom;
                        d.DateTo = DateTo;
                        d.LRFrom = LRFrom;
                        d.LRTo = LRTo;
                        d.CityFromIds = CityFromIds;
                        d.CityToIds = CityToIds;
                        d.ConsignorIds = ConsignorIds;
                        d.ConsigneeIds = ConsigneeIds;
                        d.BillPartyIds = BillPartyIds;
                        d.PayTypeIds = PayTypeIds;
                        d.PvtMarkIds = PvtMarkIds;
                        d.ChalanId = ChalanId;
                        d.InvStatusId = InvStatusId;
                    }
                },
                "initComplete": function (settings, json) {
                    gridInitComplete(table);
                },
                "drawCallback": function (settings) {
                    gridDrawCallback(this);

                    let api = this.api();
                    let rows = api.rows({ page: 'current' }).nodes();
                    tableBody.empty();

                    for (let i = 0; i < rows.length; i++) {
                        let billPartyCell = api.cell(i, 0).data();

                        if (prevParty !== null && billPartyCell !== prevParty) {
                            if (SubTotal) {
                                let subtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                                    '<td colspan="4">SUB TOTAL</td>' +
                                    '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                                    '<td colspan="3"></td>' +
                                    '</tr>';

                                tableBody.append(subtotalRow);
                            }
                            subTotalAmount = 0;
                        }

                        subTotalAmount += parseFloat(api.cell(i, 4).data());
                        totalAmount += parseFloat(api.cell(i, 4).data());

                        tableBody.append(rows[i]);
                        prevParty = billPartyCell;
                    }

                    if (prevParty !== null && SubTotal) {
                        let finalSubtotalRow = '<tr class="subtotal-row" style="font-weight:500;background:#e5e4e2;color:#000080;">' +
                            '<td colspan="4">SUB TOTAL</td>' +
                            '<td class="text-right"> ' + subTotalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(finalSubtotalRow);
                    }

                    if (totalAmount > 0) {
                        let totalRow = '<tr class="total-row" style="font-weight:600;background:#cccccc;color:#FF0000;">' +
                            '<td colspan="4">TOTAL</td>' +
                            '<td class="text-right"> ' + totalAmount.toFixed(2) + '</td>' +
                            '<td colspan="3"></td>' +
                            '</tr>';

                        tableBody.append(totalRow);
                    }
                }
            });
        }
    </script>

}
